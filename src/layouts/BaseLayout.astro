---
import { useStoryblokApi } from "@storyblok/astro";
import Header from "../components/Header.astro";
import HeroAnimation from "../components/HeroAnimation.astro";
import CookieBanner from "../components/CookieBanner.astro";
import lynnWhite from "../assets/lynnWhite.svg";

const { updateHeaderLinks } = Astro.props;
const storyblokApi = useStoryblokApi();
const dev = import.meta.env.DEV;
const { data } = await storyblokApi.get("cdn/stories/home", {
  version: dev ? "draft" : "published",
});
const content = data.story.content;
const isFrontendEditor = Astro.url.searchParams.get("_storyblok")! || "";

const cookies = Astro.request.headers.get("cookie");

const cookiesAccepted = cookies?.includes("cookiesAccepted=true");

const isBot =
  Astro.request.headers.get("user-agent")?.match(/bot/i) ||
  Astro.request.headers.get("sec-ch-ua")?.match(/lighthouse/i);
---

<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="shortcut icon" type="image/png" href="/favicon/favicon_1.png" />
    <link
      rel="preload"
      href="/fonts/PPNeueMontreal-Medium.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link rel="preload" href={lynnWhite.src} as="image">
    <title>{content?.meta?.title || "Lynn Gr√ºtter"}</title>
    <meta
      name="description"
      content={content?.meta?.description ||
        "Ich moderiere: Vor der Fernsehkamera, online oder live an Ihrem Anlass."}
    />
  </head>
  <body
    data-body
    class=`font-montrealMedium overflow-hidden leading-tight ${(!dev || isFrontendEditor) && 'dev'}`
  >
    <Header updateHeaderLinks={updateHeaderLinks} />
    {dev && !isFrontendEditor && <HeroAnimation />}
    <main class="relative opacity-0 bg-gray" data-main>
      <div>
        <slot />
      </div>
    </main>
    {!cookiesAccepted && !isBot && <CookieBanner />}
  </body>
</html>

<script>
  if (!document.body.classList.contains("dev")) {
    if ("scrollRestoration" in history) {
      history.scrollRestoration = "manual";
    }
  }

  // udpate the favicon all 2 seconds
  const favicon = document.querySelector("link[rel='shortcut icon']");
  const favicons = ["/favicon/favicon_2.png",  "/favicon/favicon_3.png", "/favicon/favicon_1.png"];
  let i = 0;
  setInterval(() => {
    favicon.href = favicons[i];
    i = (i + 1) % favicons.length;
  }, 2000);


  // if video has attribute data-autoplay, play it if near the viewport
  const videos = document.querySelectorAll("video[data-autoplay]");
  const playedVideos = new Set();
  let videosToPlay = new Set();
  let isDialogOpen = false;
  const videoObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        // if video already loaded
        if (
          entry.target.readyState > 3 &&
          entry.target.hasAttribute("data-initialized")
        ) {
          entry.target.play().then(() => {
            playedVideos.add(entry.target);
            entry.target.classList.remove("loading");

            if (playedVideos.size > 2) {
              // delete the first video in the set
              const firstVideo = playedVideos.values().next().value;
              playedVideos.delete(firstVideo);
              firstVideo.pause();
            }
          });

          return;
        }

        // show a loader until the video is ready to play
        entry.target.classList.add("loading");
        const loadVideo = setTimeout(() => {
          entry.target.setAttribute("data-initialized", "true");

          // on play callback remove the observer and the attribute
          entry.target.play().then(() => {
            playedVideos.add(entry.target);
            entry.target.classList.remove("loading");

            // if video is [data-test]
            if (
              !entry.target.hasAttribute("data-scroll-section-video") &&
              !entry.target.hasAttribute(
                "data-grid-category-item-gallery-image",
              )
            ) {
              entry.target.addEventListener("mouseenter", function () {
                // check if video can be paused
                if (
                  entry.target.readyState > 3 &&
                  entry.target.paused === false
                ) {
                  entry.target.pause();
                }
              });
              entry.target.addEventListener("mouseleave", function () {
                // check if video can be played
                if (
                  entry.target.readyState > 3 &&
                  entry.target.paused === true &&
                  !isDialogOpen
                ) {
                  entry.target.play();
                }
              });
              entry.target.addEventListener("touchstart", function () {
                if (
                  entry.target.readyState > 3 &&
                  entry.target.paused === false
                ) {
                  entry.target.pause();
                }
              });
              entry.target.addEventListener("touchend", function () {
                if (
                  entry.target.readyState > 3 &&
                  entry.target.paused === true &&
                  !isDialogOpen
                ) {
                  entry.target.play();
                }
              });

              if (playedVideos.size > 2) {
                // delete the first video in the set
                const firstVideo = playedVideos.values().next().value;
                playedVideos.delete(firstVideo);
                firstVideo.pause();
              }
            }
          });
        }, 200);
        entry.target.dataset.loadVideo = loadVideo;
      } else {
        clearTimeout(entry.target.dataset.loadVideo);
        if (entry.target.readyState > 3 && playedVideos.has(entry.target)) {
          // delete the first video in the set
          const firstVideo = playedVideos.values().next().value;
          playedVideos.delete(firstVideo);
          firstVideo.pause();
        }
      }
    });
  });

  videos.forEach((video) => {
    videoObserver.observe(video);
  });

  const images = document.querySelectorAll("img[data-loading='lazy']");
  const observer = new IntersectionObserver(
    (entries, observer) => {
      entries.forEach((entry) => {
        if (!entry.isIntersecting) {
          clearTimeout(entry.target.dataset.loadImage);
          return;
        }

        const image = entry.target;
        image.classList.add("loading");

        const loadImage = setTimeout(() => {
          if (image.dataset.srcset) {
            image.srcset = image.dataset.srcset;
          } else {
            image.removeAttribute("srcset");
          }
          image.addEventListener("load", () => {
            image.classList.remove("loading");
            image.classList.add("loaded");
            image.removeAttribute("data-loading");
            image.removeAttribute("data-src");
            image.removeAttribute("data-srcset");
            observer.unobserve(image);
          });
        }, 200);
        image.dataset.loadImage = loadImage;
      });
    },
    { rootMargin: "0px 0px 200px 0px" },
  ); // Adjust this value to control when the image starts loading

  images.forEach((image) => {
    observer.observe(image);
  });

  const gridItems = document.querySelectorAll(
    "[data-grid-category-item-content]",
  );

  gridItems.forEach((item) => {
    item.addEventListener("click", function (e) {
      e.preventDefault();
      const dialog = item.nextElementSibling;
      if (dialog && dialog.matches("[data-grid-gallery-dialog]")) {
        isDialogOpen = true;
        // pause all videos
        playedVideos.forEach((video) => {
          video.pause();
        });

        videosToPlay = new Set(playedVideos);
        playedVideos.clear();
      }
    });
  });

  const dialogCloseButtons = document.querySelectorAll(
    "[data-dialog-close]",
  );

  dialogCloseButtons.forEach((button) => {
    button.addEventListener("click", function () {
      playedVideos.forEach((video) => {
        video.pause();
      });

      playedVideos.clear();

      videosToPlay.forEach((video) => {
        video.play().then(() => {
          playedVideos.add(video);
          if (playedVideos.size > 2) {
            // delete the first video in the set
            const firstVideo = playedVideos.values().next().value;
            playedVideos.delete(firstVideo);
            firstVideo.pause();
          }
          isDialogOpen = false;
        });
      });
    });
  });
</script>

<style is:global>
  html {
    scroll-behavior: smooth;
    min-width: 375px;
  }

  body {
    transition:
      filter 0.325s ease-in-out,
      opacity 0.75s ease-in-out;
  }

  body,
  a,
  button,
  video,
  iframe,
  [data-grid-category-item-content] {
    cursor:
      url("/custom-cursor-transparent.png") 15 15,
      auto !important;
  }

  a {
    z-index: 50;
    position: relative;
  }

  .loading {
    opacity: 0;
    transform: translateY(-1rem);
  }

  video, iframe, img {
    transition: opacity 0.325s ease-in-out, transform 0.325s ease-in-out;
  }

  .container {
    padding-left: 1rem;
    padding-right: 1rem;
    max-width: 1920px;
  }

  .row-container:not(.container) {
    max-width: 1920px;
    margin: auto;
  }

  .dev {
    overflow: auto;
  }

  .dev main {
    opacity: 1;
    background: transparent;
  }

  .dev header {
    pointer-events: auto;
    mix-blend-mode: normal;
    color: black;
    transition:
      background 0.75s ease-in-out,
      transform 0.325s ease-in-out !important;
  }

  .dev header .header-nav-logo {
    opacity: 1;
  }

  .dev header .header-nav-logo-white {
    display: none;
  }

  .dev .header-nav-content-menu {
    opacity: 1;
  }

  @font-face {
    font-family: "NeueMontreal-Medium";
    src: url("/fonts/PPNeueMontreal-Medium.woff2") format("woff2");
    font-weight: medium;
    font-style: normal;
    font-display: swap;
  }
</style>
