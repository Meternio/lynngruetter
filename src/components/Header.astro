---
import { useStoryblokApi } from "@storyblok/astro";
import lynn from "../assets/lynn_reworked.svg";
import lynnWhite from "../assets/lynn_reworked-white.svg";
import { Image } from "astro:assets";

const { updateHeaderLinks } = Astro.props;

const storyblokApi = useStoryblokApi();

const { data } = await storyblokApi.get("cdn/stories/home", {
  version: "draft",
});

const content = data.story.content;
---

<header
  class="header absolute w-full z-[60] px-4 sm py-4 mix-blend-difference text-white text-sm lg:text-xl pointer-events-none"
  data-header
>
  <nav
    class="header-nav h-full flex items-end lg:justify-between !leading-none"
  >
    <a
      href="/"
      class="uppercase order-1 w-[54px] lg:w-[82px] h-4 lg:h-5 flex-shrink-0"
    >
      <Image
        src={lynnWhite}
        fetchpriority="high"
        alt="Lynn Gruetter's signature"
        width="82"
        height="24"
        class="header-nav-logo-white absolute w-auto h-3.5 lg:h-5"
        data-header-nav-logo-white
      />
      <Image
        src={lynn}
        alt="Lynn Gruetter's signature"
        width="82"
        height="24"
        loading="lazy"
        class="header-nav-logo absolute w-auto h-3.5 lg:h-5 opacity-0"
        data-header-nav-logo
      />
    </a>
    <div
      class="header-nav-content-menu order-2 flex flex-row justify-center relative px-2 gap-2 flex-grow lg:leading-4 lg:text-[22px] lg:flex-grow-0 lg:justify-start lg:px-0 lg:gap-4 lg:self-auto lg:top-0 lg:order-1 lg:w-2/5"
      data-header-nav-content-menu
    >
      {
        content.body.map((item, index) => (
          <a
            {...{ "data-redirect": updateHeaderLinks ? "true" : false }}
            href={updateHeaderLinks ? `/#${item.id}` : `#${item.id}`}
            class={`lg:text-center`}
          >
            {item.name}
          </a>
        ))
      }
    </div>
    <!--<button
      class="header-nav-content-menu-button order-2 lg:hidden"
      data-header-nav-content-menu-button
      aria-label="Button to open the menu"
    >
      <span class="bar"></span>
      <span class="bar"></span>
      <span class="bar"></span>
    </button>-->
  </nav>

  <script>
    import { debounce, throttle } from "../assets/main.js";

    // only show header when scrolling up
    let lastScrollTop = 0;
    const header = document.querySelector("[data-header]");
    const headerNav = document.querySelectorAll(
      "[data-header-nav-content-menu] > a",
    );
    const body = document.querySelector("body");
    const headerNavLogo = document.querySelector("[data-header-nav-logo]");
    const headerNavLogoWhite = document.querySelector(
      "[data-header-nav-logo-white]",
    );
    let headerHeight = window.innerWidth >= 1024 ? 52 : 48;
    let adjustTransformTimeout = null;

    function scrollTo(offset, callback) {
      const fixedOffset = parseInt(offset, 10);
      const onScroll = function () {
        const threshold = 90;
        if (Math.abs(window.scrollY - fixedOffset) <= threshold) {
          window.removeEventListener("scroll", onScroll);
          callback();
        }
      };

      window.addEventListener("scroll", onScroll);
      onScroll();
      window.scrollTo({
        top: offset,
        behavior: "smooth",
      });
    }

    function adjustTransform(el, operation) {
      // get current transform
      const transform = el.style.transform;

      if (!transform || el.getAttribute("data-transform") === operation) return;

      // add attribute to element to prevent multiple transformations
      el.setAttribute("data-transform", operation);

      // get current translate X value
      let translateX = transform.match(/translate\((-?\d+)px, /);

      if (translateX) {
        translateX = parseInt(translateX[1]);
      }

      // get current screen position of element
      const rect = el.getBoundingClientRect();
      if (rect.top > headerHeight + 16) return;

      // add or subtract 52px to the current translateY value based on the operation
      let newTranslateY = `calc(-100dvh + 32px + 100%)`;

      if (
        !document
          .querySelector("[data-header]")
          .classList.contains("-translate-y-full")
      ) {
        newTranslateY = `calc(-100dvh + 32px + 100% + ${headerHeight}px)`;
      }

      // replace the current translateY value with the new one
      el.style.transform = `translate(${translateX}px, ${newTranslateY})`;
    }

    headerNav.forEach((el, index) => {
      el.addEventListener("click", (e) => {
        if (e.currentTarget.getAttribute("data-redirect")) return;

        e.preventDefault();

        const target = e.currentTarget.getAttribute("href").replace("#", "");
        const targetEl = document.getElementById(target);
        const rect = targetEl.getBoundingClientRect();
        const scrollTop = window.scrollY || document.documentElement.scrollTop;
        const targetScrollPosition = rect.top + scrollTop;

        // Always subtract the header height from the offset
        let offsetTop = headerHeight;

        if (window.innerWidth >= 1024 && targetScrollPosition === 0) {
          offsetTop = window.innerHeight;
        }

        // Add a class to the header to make it always visible
        header.classList.remove("-translate-y-full", "absolute");
        header.classList.add("fixed");

        body.classList.add("opacity-0", "blur-sm");

        window.setTimeout(() => {
          window.removeEventListener("scroll", throttleScroll);
          scrollTo(Math.abs(targetScrollPosition - offsetTop), () => {
            body.classList.remove("blur-sm", "opacity-0");
            header.classList.remove("-translate-y-full", "absolute");
            header.classList.add("fixed");

            // if current Scroll is less than header height, add mix-blend-difference
            if (window.scrollY <= headerHeight) {
              header.classList.add("mix-blend-difference", "text-white");
              header.classList.remove("text-black", "bg-white");
              headerNavLogo.classList.add("opacity-0");
              headerNavLogoWhite.classList.remove("opacity-0");
            } else {
              header.classList.remove("mix-blend-difference", "text-white");
              header.classList.add("text-black", "bg-white");
              headerNavLogo.classList.remove("opacity-0");
              headerNavLogoWhite.classList.add("opacity-0");
            }

            window.setTimeout(() => {
              window.addEventListener("scroll", throttleScroll);
            }, 500);
          });
        }, 500);
      });
    });

    const throttleScroll = throttle(() => {
      if (document.querySelector(".grid-categories-titles-active-animation")) {
        return;
      }

      const currentScroll =
        window.scrollY || document.documentElement.scrollTop;

      if (
        currentScroll > headerHeight &&
        !header.classList.contains("bg-white")
      ) {
        window.setTimeout(() => {
          header.classList.add("bg-white");
        }, 750);
        headerNavLogo.classList.remove("opacity-0");
        headerNavLogoWhite.classList.add("opacity-0");
      } else if (
        currentScroll === 0
      ) {
        header.classList.remove("bg-white");

        window.setTimeout(() => {
          header.classList.add("mix-blend-difference", "text-white");
          header.classList.remove("text-black");
        }, 600);

        headerNavLogo.classList.add("opacity-0");
        headerNavLogoWhite.classList.remove("opacity-0");
      }

      if (currentScroll > lastScrollTop && currentScroll > headerHeight) {
        header.classList.add("-translate-y-full");
        document
          .querySelectorAll("[data-grid-categories-titles]")
          .forEach((el) => {
            el.style.transition =
              "max-height 0.75s ease-in-out, top 0.30s ease-out";
            el.style.top = "0";
          });
        window.clearTimeout(adjustTransformTimeout);
        adjustTransformTimeout = window.setTimeout(() => {
          document
            .querySelectorAll("[data-scroll-section-video]")
            .forEach((el) => {
              adjustTransform(el, "added");
            });
        }, 400);
        header.classList.remove("mix-blend-difference", "text-white");
        header.classList.add("text-black");
      } else if (currentScroll > headerHeight) {
        header.classList.remove("-translate-y-full", "absolute");
        header.classList.add("fixed");
        document
          .querySelectorAll("[data-grid-categories-titles]")
          .forEach((el) => {
            el.style.transition =
              "max-height 0.75s ease-in-out, top 0.35s ease-in-out";
            el.style.top = `${headerHeight}px`;
          });
        window.clearTimeout(adjustTransformTimeout);
        adjustTransformTimeout = window.setTimeout(() => {
          document
            .querySelectorAll("[data-scroll-section-video]")
            .forEach((el) => {
              adjustTransform(el, "subtracted");
            });
        }, 400);
      } else if (
        currentScroll > lastScrollTop &&
        currentScroll < headerHeight
      ) {
        header.classList.remove("fixed");
        header.classList.add("absolute");
      }

      lastScrollTop = currentScroll <= 0 ? 0 : currentScroll;
    }, 0);

    window.setTimeout(() => {
      // throttle scroll event
      window.addEventListener("scroll", throttleScroll);
    }, 3000);

    window.addEventListener(
      "resize",
      debounce(() => {
        headerHeight = window.innerWidth >= 1024 ? 52 : 48;
        throttleScroll();
      }, 400),
    );

    /*const headerNavContentMenu = document.querySelector(
      "[data-header-nav-content-menu]"
    );
    const headerNavContentMenuButton = document.querySelector(
      "[data-header-nav-content-menu-button]"
    );

    headerNavContentMenuButton.addEventListener("click", (e) => {
      e.currentTarget.classList.toggle("active");

      if(!headerNavContentMenu.classList.contains("invisible")) {
        window.setTimeout(() => {
          headerNavContentMenu.classList.toggle("invisible");
        }, 750);
      } else {
        headerNavContentMenu.classList.toggle("invisible");
      }

      headerNavContentMenu.classList.toggle("opacity-0");
    });*/
  </script>

  <style>
    .header {
      transition: transform 0.325s ease-in-out;
    }

    .header-nav {
      max-width: 1920px;
      margin: auto;
    }

    .header-nav-content-menu {
      transition: opacity 0.75s ease-in-out;
    }

    .header-nav-logo {
      transition: opacity 0.75s ease-in-out;
    }

    @media screen and (min-width: 1024px) {
      .header a:hover {
        filter: blur(2px);
      }
    }

    /*.header-nav-content-menu-button {
      position: relative;
      height: 25px;
      min-width: 25px;
    }

    .header-nav-content-menu-button .bar {
      width: 25px;
      height: 2px;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: white;
      transition: all 0.3s ease-in-out;
    }

    .header-nav-content-menu-button.active .bar:nth-of-type(1) {
      display: none;
    }

    .header-nav-content-menu-button.active .bar:nth-of-type(2) {
      top: 50%;
      transform: translate(-50%, 0%) rotate(45deg);
    }

    .header-nav-content-menu-button.active .bar:nth-of-type(3) {
      top: 50%;
      transform: translate(-50%, 0%) rotate(-45deg);
    }

    .header-nav-content-menu-button .bar:nth-of-type(2) {
      top: calc(50% - 9px);
    }

    .header-nav-content-menu-button .bar:nth-of-type(3) {
      top: calc(50% + 9px);
    }*/
  </style>
</header>
