---
import { useStoryblokApi } from "@storyblok/astro";

const storyblokApi = useStoryblokApi();

const { data } = await storyblokApi.get("cdn/stories/home", {
  version: "draft",
});

const content = data.story.content;
---

<header
  class="header fixed w-full z-40 h-20 p-4 mix-blend-difference text-white"
  data-header
>
  <nav class="header-nav h-full flex items-center lg:justify-between">
    <a href="/" class="uppercase order-1">Lynn</a>
    <div
      class="header-nav-content-menu w-full order-2 flex flex-row relative px-4 gap-4 text-sm lg:self-auto lg:top-0 lg:gap-16 lg:px-16 lg:flex-grow lg:order-1 opacity-0"
      data-header-nav-content-menu
    >
      {
        content.body.map((item, index) => (
          <a
            href={`#${item.id}`}
            class={`${
              index === content.body.length - 1 && "flex-grow"
            } lg:text-center`}
          >
            {item.name}
          </a>
        ))
      }
    </div>
    <!--<button
      class="header-nav-content-menu-button order-2 lg:hidden"
      data-header-nav-content-menu-button
      aria-label="Button to open the menu"
    >
      <span class="bar"></span>
      <span class="bar"></span>
      <span class="bar"></span>
    </button>-->
  </nav>

  <script>
    // only show header when scrolling up
    let lastScrollTop = 0;
    const header = document.querySelector("[data-header]");
    const headerNav = document.querySelectorAll(
      "[data-header-nav-content-menu] > a"
    );
    const body = document.querySelector("body");

    function scrollTo(offset, callback) {
      const fixedOffset = offset.toFixed();
      const onScroll = function () {
        if (window.pageYOffset.toFixed() === fixedOffset) {
          window.removeEventListener("scroll", onScroll);
          callback();
        }
      };

      window.addEventListener("scroll", onScroll);
      onScroll();
      window.scrollTo({
        top: offset,
        behavior: "smooth",
      });
    }

    headerNav.forEach((el, index) => {
      el.addEventListener("click", (e) => {
        e.preventDefault();

        const target = e.currentTarget.getAttribute("href").replace("#", "");
        const targetEl = document.getElementById(target);
        const rect = targetEl.getBoundingClientRect();
        const scrollTop = window.scrollY || document.documentElement.scrollTop;
        const targetScrollPosition = rect.top + scrollTop;
        const offsetTop =
          lastScrollTop > targetEl.getBoundingClientRect()?.top + lastScrollTop
            ? 80
            : index === 0
              ? -80
              : 0;

        body.classList.add("opacity-0", "blur-sm");

        window.setTimeout(() => {
          scrollTo(targetScrollPosition - offsetTop, () => {
            body.classList.remove("blur-sm", "opacity-0");
          });
        }, 500);
      });
    });

    window.addEventListener("scroll", () => {
      if (document.querySelector(".grid-categories-titles-active-animation")) {
        return;
      }

      const currentScroll =
        window.pageYOffset || document.documentElement.scrollTop;

      if (currentScroll > lastScrollTop && currentScroll > 80) {
        header.classList.add("-translate-y-full");
        document
          .querySelectorAll("[data-grid-categories-titles]")
          .forEach((el) => {
            el.style.transition =
              "max-height 0.75s ease-in-out, top 0.26s ease-in-out";
            el.classList.remove("top-20");
            el.classList.add("top-0");
          });
      } else {
        header.classList.remove("-translate-y-full");
        document
          .querySelectorAll("[data-grid-categories-titles]")
          .forEach((el) => {
            el.style.transition =
              "max-height 0.75s ease-in-out, top 0.35s ease-in-out";
            el.classList.add("top-20");
            el.classList.remove("top-0");
          });
      }

      lastScrollTop = currentScroll <= 0 ? 0 : currentScroll;
    });

    /*const headerNavContentMenu = document.querySelector(
      "[data-header-nav-content-menu]"
    );
    const headerNavContentMenuButton = document.querySelector(
      "[data-header-nav-content-menu-button]"
    );

    headerNavContentMenuButton.addEventListener("click", (e) => {
      e.currentTarget.classList.toggle("active");

      if(!headerNavContentMenu.classList.contains("invisible")) {
        window.setTimeout(() => {
          headerNavContentMenu.classList.toggle("invisible");
        }, 750);
      } else {
        headerNavContentMenu.classList.toggle("invisible");
      }

      headerNavContentMenu.classList.toggle("opacity-0");
    });*/
  </script>

  <style>
    .header {
      transition: transform 0.325s ease-in-out;
    }

    .header-nav-content-menu {
      transition: opacity 0.75s ease-in-out;
    }

    @media screen and (min-width: 1024px) {
      .header a:hover {
        filter: blur(2px);
      }
    }

    /*.header-nav-content-menu-button {
      position: relative;
      height: 25px;
      min-width: 25px;
    }

    .header-nav-content-menu-button .bar {
      width: 25px;
      height: 2px;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: white;
      transition: all 0.3s ease-in-out;
    }

    .header-nav-content-menu-button.active .bar:nth-of-type(1) {
      display: none;
    }

    .header-nav-content-menu-button.active .bar:nth-of-type(2) {
      top: 50%;
      transform: translate(-50%, 0%) rotate(45deg);
    }

    .header-nav-content-menu-button.active .bar:nth-of-type(3) {
      top: 50%;
      transform: translate(-50%, 0%) rotate(-45deg);
    }

    .header-nav-content-menu-button .bar:nth-of-type(2) {
      top: calc(50% - 9px);
    }

    .header-nav-content-menu-button .bar:nth-of-type(3) {
      top: calc(50% + 9px);
    }*/
  </style>
</header>
