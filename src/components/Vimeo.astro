---
import { Image } from "astro:assets";
import sound from "../assets/sound.svg";
import pause from "../assets/pause.svg";
import play from "../assets/play.svg";
import mute from "../assets/mute.svg";
import fullscreen from "../assets/fullscreen.svg";
import boxedscreen from "../assets/boxedscreen.svg";

const {
  videoData,
  noControls,
  autoplay,
  quality,
  isHero,
  isScrollSection,
  dynamicResize,
  muted,
} = Astro.props;

let additionalVimeoProps = "";
const localVideoData = videoData.vimeo_oembed?.response || videoData;
const videoId = localVideoData.video_id || videoData.vimeo_raw.split("/").pop();

if (quality) {
  additionalVimeoProps = additionalVimeoProps + `&quality=${quality}`;
}

if (autoplay) {
  additionalVimeoProps = additionalVimeoProps + `&muted=1&background=1`;
}

if (muted) {
  additionalVimeoProps = additionalVimeoProps + `&muted=1`;
}

function formatSeconds(seconds) {
  // Calculate the minutes and seconds from the total seconds
  const mins = Math.floor(seconds / 60);
  const secs = seconds % 60;

  // Format the seconds to always show two digits
  const formattedSeconds = secs < 10 ? "0" + secs : secs;

  // if nan return 0:00
  if (isNaN(mins) || isNaN(secs)) {
    return `0:00`;
  }

  if (Math.round(secs) === 60) {
    return `${mins + 1}:00`;
  }

  // Return the formatted time
  return mins + ":" + formattedSeconds;
}
---

<div
  data-fullscreen-wrapper
  class={`vimeo-wrapper ${isHero && "vimeo-wrapper-hero"}`}
>
  <iframe
    src={`https://player.vimeo.com/video/${videoId}?controls=0&loop=1&dnt=1${additionalVimeoProps}#t=1s`}
    width={localVideoData.width || 426}
    height={localVideoData.height || 240}
    class={`vimeo-video pointer-events-none loading ${isScrollSection && "rounded-xl"}`}
    allow="autoplay; fullscreen;"
    title={localVideoData.title || "Vimeo Video"}
    data-vimeo-video
    {...{ "data-auto-play": autoplay ? "true" : false }}
    {...{ "data-no-controls": noControls ? "true" : false }}
    {...{ "data-vimeo-hero": isHero ? "true" : false }}
    {...{ "data-scroll-section": isScrollSection ? "true" : false }}
    {...{ "data-dynamic-resize": dynamicResize ? "true" : false }}></iframe>
  {
    !noControls && (
      <div
        class="vimeo-controls absolute bottom-0 left-1/2 -translate-x-1/2 w-full p-4"
        data-vimeo-video-controls
      >
        <div class="flex justify-between items-center -mx-2">
          <div class="flex flex-row gap-2">
            <button
              class={`hover:blur-[2px] p-1 ${autoplay && "hidden"}`}
              aria-label="Play Video"
              data-play
            >
              <Image src={play} alt="Play Video" width="20" height="20" />
            </button>
            <button
              class={`hover:blur-[2px] p-1 ${!autoplay && "hidden"}`}
              aria-label="Pause Video"
              data-pause
            >
              <Image src={pause} alt="Pause Video" width="20" height="20" />
            </button>
            <div class="flex items-center gap-2">
              <span class="text-xs text-white" data-time-current>
                0:00
              </span>
              <div class="text-white">/</div>
              <span class="text-xs text-white" data-time-max>
                {formatSeconds(localVideoData.duration)}
              </span>
            </div>
          </div>
          <div>
            <button
              class={`hover:blur-[2px] p-1 ${autoplay && "hidden"}`}
              aria-label="Mute Video"
              data-mute
            >
              <Image src={mute} alt="Mute Video" width="20" height="20" />
            </button>
            <button
              class={`hover:blur-[2px] p-1 ${!autoplay && "hidden"}`}
              aria-label="Unmute Video"
              data-unmute
            >
              <Image src={sound} alt="Unmute Video" width="20" height="20" />
            </button>
            <button
              class="hover:blur-[2px] p-1"
              aria-label="Fullscreen Video"
              data-fullscreen
            >
              <Image
                src={fullscreen}
                alt="Fullscreen Video"
                width="20"
                height="20"
              />
            </button>
            <button
              class="hover:blur-[2px] p-1 hidden"
              aria-label="Exit Fullscreen Video"
              data-boxedscreen
            >
              <Image
                src={boxedscreen}
                alt="Exit Fullscreen Video"
                width="20"
                height="20"
              />
            </button>
          </div>
        </div>
        <div
          class="vimeo-controls-progress-bar-spacer cursor-pointer p-2 -mb-2 -ml-2 -mr-2"
          data-progress-bar-wrapper
          role="slider"
          aria-valuemin="0"
          aria-valuemax={localVideoData.duration}
          aria-valuenow="0"
          aria-valuetext="0% played"
          tabindex="0"
        >
          <div class="vimeo-controls-progress-bar-wrapper h-1 w-full bg-white">
            <div
              class="vimeo-controls-progress-bar h-full w-0 bg-indigo-800 transition-all duration-200 ease-in-out"
              data-progress-bar
            />
          </div>
        </div>
      </div>
    )
  }
</div>

<script>
  import Vimeo from "@vimeo/player";
  import { debounce } from "../assets/main.js";

  const vidoes = document.querySelectorAll("[data-vimeo-video]");
  let mouseIsDown = false;
  let isPlaying = false;
  let wasPlaying = false;
  const videoInstances = [];

  window.addEventListener(
    "resize",
    debounce(() => {
      vidoes.forEach((video) => {
        const controls = video.nextElementSibling;
        positionControls(controls, video);
      });
    }, 400)
  );

  const videoObserver = new IntersectionObserver((entries) => {
    entries.forEach(async (entry) => {
      const player = videoInstances[entry.target.dataset.videoId];
      if (entry.isIntersecting) {
        await setAspectRatio(player);
        if (entry.target.dataset.autoPlay || entry.target.dataset.vimeoHero) {
          const isPaused = await player.getPaused();
          if (isPaused) {
            player.on("playing", () => {
              player.element.classList.remove("loading");
              player.off("playing");
            });
            window.setTimeout(async () => {
              player.element.classList.remove("loading");
              const isPaused = await player.getPaused();
              if (isPaused && entry.isIntersecting) {
                await player.play();
              }
            }, 2000);
          } else {
            player.element.classList.remove("loading");
          }
        } else {
          player.element.classList.remove("loading");
        }

        if (entry.target.dataset.vimeoHero) {
          entry.target.dataset.intersectedOnce = true;
        }

        if (entry.target.dataset.autoPlay || entry.target.dataset.vimeoHero) {
          await player.play();
        }

        const controls = entry.target.nextElementSibling;

        positionControls(controls, entry.target);
      } else {
        if (entry.target.dataset.intersectedOnce) {
          videoObserver.unobserve(entry.target);
        }
        if (entry.target.dataset.autoPlay || entry.target.dataset.vimeoHero) {
          await player.pause();
        }
      }
    });
  }, { threshold: 0.5 });

  async function onIframeLoaded(player) {
    if (
      player.element.dataset.autoPlay ||
      player.element.dataset.dynamicResize ||
      player.element.dataset.vimeoHero
    ) {
      if (player.element.dataset.vimeoHero) {
        window.setTimeout(() => {
          videoObserver.observe(player.element);
        }, 3000);
      } else {
        videoObserver.observe(player.element);
      }
    } else {
      await setAspectRatio(player);
      player.element.classList.remove("loading");
    }

    const controls = player.element.nextElementSibling;
    if (!controls) {
      player.element.parentElement.addEventListener(
        "mouseenter",
        async () => {
          const index = player.element.dataset.videoId;
          await videoInstances[index].pause();
        },
        false
      );

      player.element.parentElement.addEventListener(
        "mouseleave",
        async () => {
          const index = player.element.dataset.videoId;
          await videoInstances[index].play();
        },
        false
      );
      return;
    }
    const duration = await player.getDuration();
    const timeMax = controls.querySelector("[data-time-max]");
    timeMax.textContent = formatSeconds(duration);
    const progresBarWrapper = controls.querySelector(
      "[data-progress-bar-wrapper]"
    );
    progresBarWrapper.setAttribute("aria-valuemax", duration);
  }

  function positionControls(controls, video) {
    if (!controls || !video.dataset.dynamicResize) return;
    const height = video.offsetHeight;
    const width = video.offsetWidth;
    let scaledHeight = height;
    let scaledWidth = width;
    const videoAspectRatio = width / height;
    const aspectRatio = video.width / video.height;
    let bottom = 0;

    if (videoAspectRatio < aspectRatio) {
      // Video is scaled by width
      scaledHeight = width / aspectRatio;
      bottom = (height - scaledHeight) / 2;
      controls.style.maxWidth = `${width}px`;
      controls.style.bottom = `${bottom}px`;
    } else {
      // Video is scaled by height
      scaledWidth = height * aspectRatio;
      bottom = (height - scaledHeight) / 2;
      controls.style.maxWidth = `${height * aspectRatio}px`;
      controls.style.bottom = `${bottom}px`;
    }
  }

  function formatSeconds(seconds) {
    // Calculate the minutes and seconds from the total seconds
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;

    if (Math.round(secs) === 60) {
      return `${mins + 1}:00`;
    }

    // Format the seconds to always show two digits
    const formattedSeconds =
      secs < 10 ? "0" + Math.round(secs) : Math.round(secs);

    // Return the formatted time
    return mins + ":" + formattedSeconds;
  }

  function timeUpdate(data, player, progressBar) {
    const time = data.seconds;
    const video = player.element;
    const timeCurrent = video.nextElementSibling.querySelector(
      "[data-time-current]"
    );
    timeCurrent.textContent = formatSeconds(time);

    const progressPercentage = data.percent * 100;
    progressBar.style.width = `${progressPercentage}%`;

    progressBar.setAttribute("aria-valuenow", time);
    progressBar.setAttribute("aria-valuetext", `${progressPercentage}% played`);
  }

  async function setProgress(e, player, progessBarWrapper) {
    if (isPlaying) {
      await player.pause();
      wasPlaying = true;
    }

    const videoDuration = await player.getDuration();
    let updatedTime =
      (e.offsetX / progessBarWrapper.offsetWidth) * parseInt(videoDuration) +
      e.offsetX / progessBarWrapper.offsetWidth / 2.5;

    if (updatedTime < 0) {
      updatedTime = 0;
    } else if (updatedTime > videoDuration) {
      updatedTime = videoDuration;
    }

    await player.setCurrentTime(updatedTime);

    if (wasPlaying) {
      await player.play();
      wasPlaying = false;
    }
  }

  async function setAspectRatio(player) {
    const dimensions = await Promise.all([
      player.getVideoWidth(),
      player.getVideoHeight(),
    ]);
    const width = dimensions[0];
    const height = dimensions[1];
    player.element.width = width;
    player.element.height = height;
    player.element.style.aspectRatio = `${width}/${height}`;
  }

  vidoes.forEach((video, index) => {
    const player = new Vimeo(video);
    video.dataset.videoId = index;
    videoInstances.push(player);

    player.ready().then(async () => await onIframeLoaded(player));

    if (video.dataset.noControls) {
      return;
    }

    const timeMax = video.nextElementSibling.querySelector("[data-time-max]");
    const play = video.nextElementSibling.querySelector("[data-play]");
    const pause = video.nextElementSibling.querySelector("[data-pause]");
    const mute = video.nextElementSibling.querySelector("[data-mute]");
    const unmute = video.nextElementSibling.querySelector("[data-unmute]");
    const fullscreen =
      video.nextElementSibling.querySelector("[data-fullscreen]");
    const boxedscreen =
      video.nextElementSibling.querySelector("[data-boxedscreen]");
    const progressBar = video.nextElementSibling.querySelector(
      "[data-progress-bar]"
    );
    const progresBarWrapper = video.nextElementSibling.querySelector(
      "[data-progress-bar-wrapper]"
    );

    play.addEventListener("click", async () => {
      await player.play();
    });

    pause.addEventListener("click", async () => {
      await player.pause();
    });

    mute.addEventListener("click", async () => {
      await player.setMuted(true);
    });

    unmute.addEventListener("click", async () => {
      await player.setMuted(false);
    });

    fullscreen.addEventListener("click", async () => {
      await video.parentElement.requestFullscreen();
    });

    boxedscreen.addEventListener("click", async () => {
      await player.exitFullscreen();
    });

    progresBarWrapper.addEventListener("click", (e) =>
      setProgress(e, player, progresBarWrapper)
    );
    progresBarWrapper.addEventListener("mousedown", () => (mouseIsDown = true));
    progresBarWrapper.addEventListener("mouseup", () => (mouseIsDown = false));
    progresBarWrapper.addEventListener(
      "mousemove",
      (e) => mouseIsDown && setProgress(e, player, progresBarWrapper)
    );
    progresBarWrapper.addEventListener("keydown", async (e) => {
      if (e.key === "ArrowRight" || e.key === "ArrowLeft") {
        const videoDuration = await player.getDuration();
        const currentTime = await player.getCurrentTime();
        const step = 5;
        let updatedTime;

        if (e.key === "ArrowRight") {
          updatedTime = currentTime + step;
        } else {
          updatedTime = currentTime - step;
        }

        if (updatedTime < 0) {
          updatedTime = 0;
        } else if (updatedTime > videoDuration) {
          updatedTime = videoDuration;
        }

        player.setCurrentTime(updatedTime);
      }

      if (e.key === " ") {
        e.preventDefault();
        if (isPlaying) {
          await player.pause();
        } else {
          await player.play();
        }
      }
    });

    player.on("play", () => {
      isPlaying = true;
      play.classList.add("hidden");
      pause.classList.remove("hidden");
    });

    player.on("pause", () => {
      isPlaying = false;
      pause.classList.add("hidden");
      play.classList.remove("hidden");
    });

    player.on("volumechange", async () => {
      const muted = await player.getMuted();
      if (muted) {
        mute.classList.add("hidden");
        unmute.classList.remove("hidden");
      } else {
        unmute.classList.add("hidden");
        mute.classList.remove("hidden");
      }
    });

    player.on("fullscreenchange", async () => {
      const isFullscreen = await player.getFullscreen();
      if (isFullscreen) {
        if (video.dataset.vimeoHero) {
          video.parentElement.classList.remove("vimeo-wrapper-hero");
        }

        fullscreen.classList.add("hidden");
        boxedscreen.classList.remove("hidden");
      } else {
        if (video.dataset.vimeoHero) {
          video.parentElement.classList.add("vimeo-wrapper-hero");
        }
        boxedscreen.classList.add("hidden");
        fullscreen.classList.remove("hidden");
      }
    });

    player.on("timeupdate", (data) => {
      timeUpdate(data, player, progressBar);
    });
  });
</script>

<style>
  .vimeo-wrapper {
    position: relative;
    overflow: hidden;
    width: 100%;
    height: 100%;
  }

  .vimeo-video {
    aspect-ratio: 16 / 9;
  }

  .vimeo-wrapper:not(.vimeo-wrapper-hero) > iframe {
    width: 100%;
    height: 100%;
  }

  .vimeo-wrapper-hero .vimeo-video {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 100dvw;
    height: 100dvh;
    transform: translate(-50%, -50%);
  }

  @media (min-aspect-ratio: 16/9) {
    .vimeo-wrapper-hero .vimeo-video {
      /* height = 100 * (9 / 16) = 56.25 */
      height: 56.25vw;
    }
  }
  @media (max-aspect-ratio: 16/9) {
    .vimeo-wrapper-hero .vimeo-video {
      /* width = 100 / (9 / 16) = 177.777777 */
      width: 177.78vh;
    }
  }

  @media (max-width: 1024px) {
    .vimeo-wrapper-hero {
      height: 320px;
    }
  }

  @media (max-width: 570px) {
    .vimeo-wrapper-hero .vimeo-video {
      height: 320px;
    }
  }
</style>
