---
import { storyblokEditable } from "@storyblok/astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import Signature from "./Signature.astro";

const { classes, blok, color } = Astro.props;

const maxItemWidth = blok?.maxItemWidth ? blok?.maxItemWidth + "px" : "100%";

if (blok) {
  blok.signatureAbsolute = true;
}
---

<div
  class={`carousel overflow-hidden relative ${
    blok?.items ? "carousel-storyblok" : ""
  } ${classes}`}
  data-carousel
  {...storyblokEditable(blok)}
>
  <div
    class=`carousel-viewport h-full m-auto ${(blok?.items && !blok?.autoScroll && !blok?.autoPlay)  ? 'max-w-[calc(100%-100px)] overflow-hidden' : ''}`
    data-carousel-viewport
    {...{
      "data-auto-height": blok?.autoHeight ? true : false,
      "data-auto-scroll": blok?.autoScroll ? true : false,
      "data-auto-play": blok?.autoPlay ? true : false,
    }}
  >
    <div
      class=`carousel-container h-full flex ${blok?.items ? 'items-start' : ''}`
    >
      {
        blok?.items ? (
          blok.items.map((blok) => {
            return (
              <div class="carousel-slide text-center" data-carousel-slide>
                <StoryblokComponent blok={blok} />
              </div>
            );
          })
        ) : (
          <slot />
        )
      }
    </div>
  </div>
  {
    !blok?.autoScroll && !blok?.autoPlay && (
      <>
        <div data-carousel-prev class={`carousel-navigation-prev-wrapper absolute w-1/2 ${blok?.items ? 'h-full' : 'h-[calc(100%-60px)]'} top-0`}>
          <button
            class={`carousel-prev absolute left-0 ${
              blok?.items ? "top-[calc(50%-18px)] " : "top-1/2"
            } -translate-y-1/2 z-30`}
            aria-label="Button to slide backwards in the carousel"
          />
        </div>
        <div data-carousel-next class={`carousel-navigation-next-wrapper absolute w-1/2 ${blok?.items ? 'h-full' : 'h-[calc(100%-60px)]'} top-0 right-0`}>
          <button
            class={`carousel-next absolute right-0 ${
              blok?.items ? "top-[calc(50%-18px)] " : "top-1/2"
            } -translate-y-1/2 z-30`}
            aria-label="Button to slide forward in the carousel"
          />
        </div>
      </>
    )
  }
  {blok?.signature && <Signature blok={blok} />}
</div>

<script>
  import EmblaCarousel from "embla-carousel";
  import AutoHeight from "embla-carousel-auto-height";
  import AutoScroll from "embla-carousel-auto-scroll";
  import AutoPlay from "embla-carousel-autoplay";

  const emblaNodes = document.querySelectorAll("[data-carousel-viewport]");

  const emblaInstances = [];
  let emblaNodeIndex = -1;

  emblaNodes.forEach((node) => {
    // check if slide is a child of carousel
    if (node.querySelectorAll("[data-carousel-slide]").length === 0) {
      return true;
    }

    const options = { loop: true };

    emblaNodeIndex += 1;

    const prevButtonNode = node.parentNode.querySelector(
      "[data-carousel-prev]"
    );
    const nextButtonNode = node.parentNode.querySelector(
      "[data-carousel-next]"
    );

    const emblaPlugins = [];

    if (typeof node.getAttribute("data-auto-height") === "string") {
      emblaPlugins.push(AutoHeight());
    }

    if (typeof node.getAttribute("data-auto-scroll") === "string") {
      emblaPlugins.push(
        AutoScroll({
          startDelay: 0,
          stopOnFocusIn: false,
          stopOnInteraction: false,
        })
      );

      options.dragFree = true;
    }

    if (typeof node.getAttribute("data-auto-play") === "string") {
      emblaPlugins.push(
        AutoPlay({
          stopOnInteraction: false,
          stopOnFocusIn: false,
        })
      );
    }

    emblaInstances.push(EmblaCarousel(node, options, emblaPlugins));
    node.setAttribute(
      "data-carousel-instance-index",
      emblaNodeIndex.toString()
    );

    if (
      typeof node.getAttribute("data-auto-scroll") !== "string" &&
      typeof node.getAttribute("data-auto-play") !== "string"
    ) {
      prevButtonNode.addEventListener(
        "click",
        (e) => {
          const instanceIndex = e.currentTarget.parentNode
            .querySelector("[data-carousel-instance-index]")
            .getAttribute("data-carousel-instance-index");
          emblaInstances[instanceIndex].scrollPrev();
        },
        false
      );
      nextButtonNode.addEventListener(
        "click",
        (e) => {
          const instanceIndex = e.currentTarget.parentNode
            .querySelector("[data-carousel-instance-index]")
            .getAttribute("data-carousel-instance-index");
          emblaInstances[instanceIndex].scrollNext();
        },
        false
      );
    }
  });
</script>

<style define:vars={{ color, maxItemWidth }}>
  :global(.carousel-slide) {
    flex: 0 0 100%;
    min-width: 0;
    max-width: var(--maxItemWidth, "100%");
  }

  :global(.carousel-storyblok .carousel-slide img) {
    margin: auto;
  }

  :global(.carousel-slide > .text-section-content) {
    margin-top: 0;
  }

  [data-auto-height="true"] {
    height: calc(100% - 32px);
  }

  .carousel-navigation-prev-wrapper, .carousel-navigation-prev-wrapper button {
    cursor: url("/custom-cursor-left.png") -15 15, auto !important;
  }

  .carousel-navigation-next-wrapper, .carousel-navigation-next-wrapper button {
    cursor: url("/custom-cursor-right.png") 15 15, auto !important;
  }

  .carousel-container {
    transition: height 0.2s;
  }

  .carousel-prev,
  .carousel-next {
    width: 0;
    height: 0;
    display: block;
    filter: blur(2px);
  }

  .carousel-prev:hover,
  .carousel-next:hover {
    filter: blur(0);
  }

  .carousel-prev {
    border-top: 8px solid transparent;
    border-bottom: 8px solid transparent;
    border-right: 12px solid var(--color, #a6a6a6);
  }

  .carousel-next {
    border-top: 8px solid transparent;
    border-bottom: 8px solid transparent;
    border-left: 12px solid var(--color, #a6a6a6);
  }

  /*.carousel-prev:after {
    content: "";
    border-top: 8px solid transparent;
    border-bottom: 8px solid transparent;
    border-right: 12px solid var(--color, black);
    top: -8px;
    left: 12px;
    position: relative;
  }

  .carousel-next:after {
    content: "";
    border-top: 8px solid transparent;
    border-bottom: 8px solid transparent;
    border-left: 12px solid var(--color, black);
    top: -8px;
    right: 24px;
    position: relative;
  }*/
</style>
