---
import { storyblokEditable, useStoryblokApi } from "@storyblok/astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import Signature from "./Signature.astro";
import Vimeo from "../components/Vimeo.astro";

const { blok } = Astro.props;

const storyblokApi = useStoryblokApi();

const { data } = await storyblokApi.get("cdn/stories/home", {
  version: "draft",
});

const content = data.story.content;

let lastSection = false;

if (blok._uid === content.body[content.body.length - 1]._uid) {
  lastSection = true;
}

let filenameMedium;
let filenameSmall;

if (blok?.video && blok?.video?.filename) {
  filenameMedium = blok.asset2?.filename;
  filenameSmall = blok.asset3?.filename;
}

const isVimeo = blok?.vimeo?.vimeo_raw;
---

<section
  class="scroll-section relative"
  {...storyblokEditable(blok)}
  id={blok.id}
  data-scroll-section
>
  {
    blok.content?.map((blok) => {
      return <StoryblokComponent blok={blok} />;
    })
  }
  {
    ((blok.video && blok.video.filename) || isVimeo) && (
      <>
        <div
          data-sentinel
          class="sentinel absolute top-[50svh] w-full h-[calc(100%-50svh)] -z-10"
        />
        <div
          class="scroll-section-video-wrapper absolute w-[calc(100%-32px)] h-[calc(100%-32px)] top-0 left-0 m-4 opacity-0 blur-sm z-[60] pointer-events-none"
          data-scroll-section-video-wrapper
        >
          {isVimeo ? (
            <div
              data-scroll-section-video
              class="scroll-section-video object-cover w-48 h-auto rounded-xl absolute bottom-0 right-0 touch-none pointer-events-auto"
            >
              <Vimeo
                videoData={blok.vimeo}
                autoplay={true}
                isScrollSection={true}
              />
            </div>
          ) : (
            <video
              data-scroll-section-video
              muted
              loop
              playsinline
              preload="none"
              class="scroll-section-video object-cover w-48 h-auto rounded-xl absolute bottom-0 right-0 touch-none pointer-events-auto"
            >
              {filenameMedium ? (
                <>
                  <source
                    src={blok.video.filename}
                    media="(min-width: 800px)"
                  />
                  <source src={filenameMedium} media="(min-width: 500px)" />
                  {filenameSmall ? (
                    <source src={filenameSmall} />
                  ) : (
                    <source src={filenameMedium} />
                  )}
                </>
              ) : (
                <source src={blok.video.filename} />
              )}
              Sorry, dein Browser unterst√ºzt keine Videos.
            </video>
          )}
        </div>
        <div
          data-sentinel
          data-sentinel-snap
          class="sentinel sentinel-snap lg:hidden"
        />
      </>
    )
  }
  {
    (blok.signature || blok.signatureAbsolute) && (
      <Signature blok={blok} lastSection={lastSection} />
    )
  }
</section>

<script>
  import interact from "interactjs";
  import { debounce } from "../assets/main.js";

  const position = { x: 0, y: 0 };
  let isDragging = false;
  let isZoomed = false;
  let previousWidth = window.innerWidth;

  function getNearestCorner(event) {
    // Get the bounding rectangle of the dragged object
    const rect = event.rect;

    // Calculate the center of the dragged object
    const centerX = rect.left + rect.width / 2 - window.scrollX;
    const centerY = rect.top + rect.height / 2 - window.scrollY;

    // Get the dimensions of the viewport
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;

    // Calculate the distances from the center of the dragged object to each corner of the viewport
    const distances = {
      "top-left": Math.sqrt(centerX * centerX + centerY * centerY),
      "top-right": Math.sqrt(
        (viewportWidth - centerX) * (viewportWidth - centerX) +
          centerY * centerY
      ),
      "bottom-left": Math.sqrt(
        centerX * centerX +
          (viewportHeight - centerY) * (viewportHeight - centerY)
      ),
      "bottom-right": Math.sqrt(
        (viewportWidth - centerX) * (viewportWidth - centerX) +
          (viewportHeight - centerY) * (viewportHeight - centerY)
      ),
    };

    // Determine the nearest corner
    let nearestCorner = "top-left";
    let minDistance = distances["top-left"];

    for (const corner in distances) {
      if (distances[corner] < minDistance) {
        nearestCorner = corner;
        minDistance = distances[corner];
      }
    }

    return nearestCorner;
  }

  function updatePosition(event, positionAsString = "bottom-right") {
    if (event.rect) {
      positionAsString = getNearestCorner(event);
    }

    // get scrollbar width
    const scrollbarWidth =
      window.innerWidth - document.documentElement.clientWidth;

    switch (positionAsString) {
      case "top-left":
        position.x = (window.innerWidth - 226 - scrollbarWidth) * -1;
        position.y = (window.innerHeight - 140) * -1;
        break;
      case "top-right":
        position.x = 0;
        position.y = (window.innerHeight - 140) * -1;
        break;
      case "bottom-left":
        position.x = (window.innerWidth - 226 - scrollbarWidth) * -1;
        position.y = 0;
        break;
      case "bottom-right":
        position.x = 0;
        position.y = 0;
        break;
    }

    if (
      positionAsString.indexOf("top") > -1 &&
      !document
        .querySelector("[data-header]")
        .classList.contains("-translate-y-full")
    ) {
      const headerHeight = window.innerWidth >= 1024 ? 52 : 48;
      position.y += headerHeight;
    }

    event.target.style.transform = `translate(${position.x}px, ${position.y}px)`;
  }

  function isTouchDevice() {
    return (
      "ontouchstart" in window ||
      navigator.maxTouchPoints > 0 ||
      navigator.msMaxTouchPoints > 0
    );
  }

  // get all videos
  const videos = document.querySelectorAll("[data-scroll-section-video]");

  // Make all videos draggable
  interact("[data-scroll-section-video]").draggable({
    // Enable inertial throwing
    inertia: true,
    // Keep the element within the area of it's parent
    modifiers: [
      interact.modifiers.restrictRect({
        restriction: "parent",
        endOnly: true,
      }),
    ],
    listeners: {
      // Call this function on every dragmove event
      move: (event) => {
        if (isZoomed) return;

        event.preventDefault();
        event.stopPropagation();
        event.stopImmediatePropagation();

        isDragging = true;
        if (isTouchDevice()) {
          document.body.style.overflow = "hidden";
        }
        event.target.style.transition = "none";

        position.x += event.dx;
        position.y += event.dy;

        event.target.style.transform = `translate(${position.x}px, ${position.y}px)`;
      },
      end: (event) => {
        if (isZoomed) return;

        event.preventDefault();
        event.stopPropagation();
        event.stopImmediatePropagation();

        event.target.style.transition =
          "transform 0.3s ease-in-out, width 0.3s ease-in-out, height 0.3s ease-in-out, bottom 0.3s ease-in-out";
        if (isTouchDevice()) {
          document.body.style.overflow = "auto";
        }
        updatePosition(event);
        window.setTimeout(() => {
          isDragging = false;
        }, 1);
      },
    },
  });

  const resetVideoSize = (event) => {
    if (event.target.closest("[data-scroll-section-video]")) return;

    const videos = event.target
      .closest("[data-scroll-section]")
      .querySelectorAll(
        "[data-scroll-section-video-wrapper].isZoomed [data-scroll-section-video]"
      );

    videos.forEach((video) => {
      isZoomed = false;
      video.parentElement.classList.remove("isZoomed");
      video.parentElement.classList.add("pointer-events-none");
      video.parentElement.removeAttribute("style");
      video.parentElement.style.position = "fixed";
      video.parentElement.style.opacity = 1;
      video.parentElement.style.filter = "blur(0px)";
      video.classList.remove("w-4/5", "bottom-1/2");
      video.classList.add("w-48", "bottom-0");
      video.style.transform = `translate(${position.x}px, ${position.y}px)`;
      window.setTimeout(() => {
        video.closest("[data-scroll-section]").classList.remove("z-10");
      }, 175);

      video
        .closest("[data-scroll-section-video-wrapper]")
        .removeEventListener("click", resetVideoSize);
      window.removeEventListener("click", resetVideoSize);
    });
  };

  // add click event to all videos to resize them to their original size
  videos.forEach((video) => {
    video.addEventListener("click", (event) => {
      event.preventDefault();
      event.stopPropagation();
      event.stopImmediatePropagation();
      if (isDragging || isZoomed) return;

      isZoomed = true;
      video.parentElement.classList.add("isZoomed");
      video.parentElement.classList.remove("pointer-events-none");
      video.closest("[data-scroll-section]").classList.add("z-10");
      video.controls = true;
      if (video.parentElement.classList.contains("isSnapped")) {
        const offsetTop = video.parentElement.nextElementSibling.offsetTop;
        video.parentElement.style.position = "absolute";
        video.parentElement.style.height =
          "clamp(8rem, calc(75vw - 8rem), 100vh)";
        video.parentElement.style.top = `${offsetTop}px`;
        video.parentElement.style.margin = 0;
        video.parentElement.style.width = "100%";
        // on outside video click, reset the video to its original size
        window.addEventListener("click", resetVideoSize);
      }
      video.classList.remove("w-48", "bottom-0");
      video.classList.add("w-4/5", "bottom-1/2");
      video.style.transform = "translate(-12.5%, 50%)";

      // on outside video click, reset the video to its original size
      video
        .closest("[data-scroll-section-video-wrapper]")
        .addEventListener("click", resetVideoSize);
    });
  });

  window.addEventListener(
    "resize",
    debounce((event) => {
      // Check if screen size has changed and reset the video size and position if necessary
      if (window.innerWidth === previousWidth) {
        return;
      }

      previousWidth = window.innerWidth;

      videos.forEach((video) => {
        if (!video.parentElement.classList.contains("isIntersecting")) {
          return;
        }
        updatePosition({
          target: video,
        });
        resetVideoSize({ target: video.parentElement });
      });
    }, 400)
  );

  // observe all scroll sections and if they are in view, make the video div fixed
  const scrollSectionsObserver = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        // Check if the target is data-sentinel-snap
        if (!entry.target.classList.contains("sentinel-snap")) {
          const videoWrapper = entry.target.parentElement.querySelector(
            "[data-scroll-section-video-wrapper]"
          );
          if (entry.isIntersecting) {
            if (videoWrapper) {
              videoWrapper.classList.add("isIntersecting");
              videoWrapper.style.position = "fixed";
              videoWrapper.style.opacity = 1;
              window.setTimeout(() => {
                videoWrapper.style.filter = "blur(0px)";
              }, 325);
            }
          } else {
            if (videoWrapper) {
              videoWrapper.classList.remove("isIntersecting");
              window.setTimeout(() => {
                videoWrapper.style.position = "absolute";
              }, 750);
              videoWrapper.style.opacity = 0;
              videoWrapper.style.filter = "blur(5px)";
            }
          }
        } else {
          const videoWrapper = entry.target.parentElement.querySelector(
            "[data-scroll-section-video-wrapper]"
          );
          if (entry.isIntersecting) {
            videoWrapper.classList.add("isSnapped");
            if (videoWrapper.classList.contains("isZoomed")) {
              const offsetTop = entry.target.offsetTop;
              videoWrapper.style.position = "absolute";
              videoWrapper.style.height =
                "clamp(8rem, calc(75vw - 8rem), 100vh)";
              videoWrapper.style.top = `${offsetTop}px`;
              videoWrapper.style.margin = 0;
              videoWrapper.style.width = "100%";
              // on outside video click, reset the video to its original size
              window.addEventListener("click", resetVideoSize);
            }
          } else {
            if (!videoWrapper.classList.contains("isSnapped")) {
              return;
            }
            videoWrapper.classList.remove("isSnapped");
            resetVideoSize({ target: entry.target.parentElement });
          }
        }
      });
    },
    {
      threshold: 0.2,
    }
  );

  document.querySelectorAll("[data-sentinel]").forEach((el) => {
    scrollSectionsObserver.observe(el);
  });
</script>

<style>
  .scroll-section :global(> .py-32 + .py-32) {
    padding-top: 0;
  }

  .scroll-section-video-wrapper {
    transition:
      opacity 0.75s,
      blur 0.325s;
  }

  @media screen and (max-width: 1023px) {
    .sentinel-snap {
      height: clamp(8rem, calc(75vw - 8rem), 100vh);
    }

    .sentinel-snap + :global(.scroll-section-signature) {
      padding-top: 8rem;
    }

    .scroll-section-video-wrapper.isZoomed:not(.isSnapped)
      .scroll-section-video {
      width: 100%;
      transform: translate(0, 50%) !important;
    }

    .scroll-section-video-wrapper.isZoomed.isSnapped .scroll-section-video {
      width: calc(100% - 30px);
      transform: translate(0, 50%) !important;
      margin: 15px;
    }
  }

  .scroll-section-video {
    transition:
      transform 0.3s ease-in-out,
      width 0.3s ease-in-out,
      height 0.3s ease-in-out,
      bottom 0.3s ease-in-out;
  }

  .scroll-section-video-wrapper:not(.isZoomed) :global(.vimeo-controls) {
    display: none;
  }
</style>
