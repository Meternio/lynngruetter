---
import { storyblokEditable } from "@storyblok/astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";

const { blok } = Astro.props;
---

<div
  {...storyblokEditable(blok)}
  class="grid-container py-32 container mx-auto"
  data-grid
>
  <div
    class="grid-categories-titles flex flex-col lg:flex-row items-center lg:justify-center sticky top-20 z-30 bg-white"
    data-grid-categories-titles
    role="tablist"
    aria-label="Tabbed Grid Categories"
  >
    <button
      class="grid-category-title grid-category-title-trigger p-4 uppercase text-black cursor-pointer lg:hidden"
      role="tab"
      data-grid-categories-titles-trigger
    >
      {blok?.categories[0]?.title}
    </button>
    {
      blok.categories.map((category, index) => {
        return (
          <button
            class={`grid-category-title p-4 uppercase invisible lg:visible text-black/40 cursor-pointer lg:hover:text-black ${
              index === 0 ? "grid-category-title-active" : ""
            }`}
            role="tab"
            aria-controls={`panel-${blok._uid}-${index}`}
            aria-selected={index === 0 ? "true" : "false"}
            tabindex={index === 0 ? "0" : "-1"}
            data-grid-category-title={index}
          >
            {category.title}
          </button>
        );
      })
    }
  </div>
  <div
    class="grid-categories-content overflow-hidden mt-5"
    data-grid-categories-content
  >
    {
      blok.categories?.map((category, index) => {
        return (
          <StoryblokComponent blok={category} index={index} uid={blok._uid} />
        );
      })
    }
  </div>
</div>

<script>
  import Masonry from "masonry-layout";
  import imagesLoaded from "imagesloaded";

  var grid = document.querySelectorAll("[data-grid]");

  grid.forEach((grid) => {
    // init mobile trigger data-grid-categories-titles-trigger
    var categoryTitlesTrigger = grid.querySelector(
      "[data-grid-categories-titles-trigger]"
    );

    categoryTitlesTrigger.addEventListener("click", function () {
      categoryTitlesTrigger.parentElement.classList.toggle(
        "grid-categories-titles-active"
      );
      window.setTimeout(() => {
        categoryTitlesTrigger.parentElement
          .querySelectorAll("[data-grid-category-title]")
          .forEach((categoryTitle) => {
            categoryTitle.classList.toggle("invisible");
          });
      }, 750);
    });

    var thumbnails = grid.querySelectorAll(
      "[data-grid-category-content='0'] [data-grid-category-item-thumbnail]"
    );

    const gridContent = grid.querySelector("[data-grid-category-content='0']");

    let msnry = [];

    msnry.push(
      new Masonry(gridContent, {
        itemSelector:
          "[data-grid-category-content='0'] [data-grid-category-item]",
        columnWidth:
          "[data-grid-category-content='0'] [data-grid-category-item-sizer]",
        gutter: 16,
        percentPosition: true,
      })
    );

    const imgLoad = imagesLoaded(thumbnails);

    imgLoad.on("progress", function (instance, image) {
      image.img
        .closest("[data-grid-category-item]")
        .classList.remove("opacity-0", "translate-y-3");
      msnry[0].layout();
      window.setTimeout(() => {
        image.img
          .closest("[data-grid-category-item]")
          .classList.remove("custom-transition");
      }, 750);
    });

    const tabLists = grid.querySelectorAll('[role="tablist"]');
    let tabFocus = 0;
    tabLists.forEach((tabList) => {
      tabList.addEventListener("keydown", (e) => {
        const tabs = tabList.querySelectorAll('[role="tab"]');
        if (e.key === "ArrowRight" || e.key === "ArrowLeft") {
          tabs[tabFocus].setAttribute("tabindex", -1);
          if (e.key === "ArrowRight") {
            tabFocus++;
            // If we're at the end, go to the start
            if (tabFocus >= tabs.length) {
              tabFocus = 0;
            }
            // Move left
          } else if (e.key === "ArrowLeft") {
            tabFocus--;
            // If we're at the start, move to the end
            if (tabFocus < 0) {
              tabFocus = tabs.length - 1;
            }
          }

          tabs[tabFocus].setAttribute("tabindex", 0);
          tabs[tabFocus].focus();
        }
      });
    });

    // add on click event to category title to show the content
    var categoryTitles = grid.querySelectorAll("[data-grid-category-title]");
    categoryTitles.forEach((categoryTitle, index) => {
      categoryTitle.addEventListener("click", function () {
        // set text of mobile trigger
        categoryTitlesTrigger.textContent = categoryTitle.textContent;
        categoryTitlesTrigger.parentElement.classList.remove(
          "grid-categories-titles-active"
        );

        // scroll to the top of the grid
        const gridTop =
          grid.getBoundingClientRect().top + window.scrollY;
        const offset = 76;
        const offsetPosition = gridTop - offset;
        window.scrollTo({
          top: offsetPosition,
          behavior: "smooth",
        });

        // hide all category contents
        var categoryContents = grid.querySelectorAll(
          "[data-grid-category-content]"
        );
        var categoryTitles = grid.querySelectorAll(
          "[data-grid-category-title]"
        );
        categoryContents.forEach((categoryContent) => {
          categoryContent.classList.add("opacity-0", "!h-0");
          categoryContent.setAttribute("hidden", "");
          categoryContent
            .querySelectorAll("[data-grid-category-item]")
            .forEach((item) => {
              item.classList.add(
                "opacity-0",
                "translate-y-3",
                "custom-transition"
              );
            });
        });
        categoryTitles.forEach((categoryTitle) => {
          categoryTitle.setAttribute("aria-selected", "false");
          categoryTitle.setAttribute("tabindex", "-1");
        });

        // show the selected category content
        categoryContents[index].classList.remove("opacity-0", "!h-0");
        categoryContents[index].removeAttribute("hidden");
        categoryTitle.setAttribute("aria-selected", "true");
        categoryTitle.setAttribute("tabindex", "0");

        // init masonry
        if (msnry[index]) {
          msnry[index].layout();

          categoryContents[index]
            .querySelectorAll("[data-grid-category-item]")
            .forEach((item) => {
              item.classList.remove("opacity-0", "translate-y-3");
            });
        } else {
          msnry.push(
            new Masonry(categoryContents[index], {
              itemSelector: `[data-grid-category-content="${index}"] [data-grid-category-item]`,
              columnWidth: `[data-grid-category-content="${index}"] [data-grid-category-item-sizer]`,
              gutter: 16,
              percentPosition: true,
            })
          );
        }

        var thumbnails = grid.querySelectorAll(
          `[data-grid-category-content="${index}"] [data-grid-category-item-thumbnail]`
        );

        const imgLoad = imagesLoaded(thumbnails);

        imgLoad.on("progress", function (instance, image) {
          image.img
            .closest("[data-grid-category-item]")
            .classList.remove("opacity-0", "translate-y-3");
          msnry[index].layout();
          window.setTimeout(() => {
            image.img
              .closest("[data-grid-category-item]")
              .classList.remove("custom-transition");
          }, 750);
        });

        // remove active class from all category titles
        var categoryTitles = grid.querySelectorAll(
          "[data-grid-category-title]"
        );
        categoryTitles.forEach((categoryTitle) => {
          categoryTitle.classList.remove("grid-category-title-active");
        });
        categoryTitles[index].classList.add("grid-category-title-active");
      });
    });
  });
</script>

<style>
  .grid-categories-titles {
    max-height: 56px;
    transition: max-height 0.75s ease-in-out;
    transform-origin: top;
  }

  .grid-categories-titles.grid-categories-titles-active {
    max-height: 500px;
  }

  .grid-category-title-trigger:after {
    content: "+";
  }

  .grid-categories-titles-active .grid-category-title-trigger:after {
    content: "-";
  }

  .grid-category-title-trigger ~ .grid-category-title {
    opacity: 0;
    transition: opacity 0.75s ease-in-out;
  }

  .grid-categories-titles-active
    .grid-category-title-trigger
    ~ .grid-category-title {
    visibility: visible;
    opacity: 1;
  }

  @media (min-width: 1024px) {
    .grid-category-title-trigger:after,
    .grid-categories-titles-active .grid-category-title-trigger:after {
      content: "";
    }

    .grid-category-title-active {
      @apply text-black;
    }

    .grid-category-title-trigger ~ .grid-category-title {
      opacity: 1;
    }
  }
</style>
