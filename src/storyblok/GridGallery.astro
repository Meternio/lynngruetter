---
import { storyblokEditable } from "@storyblok/astro";
import RichTextRenderer from "@storyblok/astro/RichTextRenderer.astro";

const { blok, current, max } = Astro.props;

let filename;
let isVideo;

if (blok?.image?.filename) {
  const regex = /\/([^\/]+)(?=\.\w+$)/;
  filename = blok.image?.filename.match(regex);

  isVideo = blok.image?.filename.match(/\.(mp4|mov|webm)$/i);
}

const isPropEmpty = (prop) => {
  return (
    prop &&
    prop?.content?.length > 0 &&
    (prop?.content[0]?.content || prop?.content[0]?.attrs)
  );
};
---

<div
  {...storyblokEditable(blok)}
  class="grid-category-item-gallery h-full flex flex-col flex-nowrap"
  data-grid-category-item-gallery
>
  <div class="h-[calc(100%-60px)]">
    {
      !isVideo ? (
        <img
          srcset={`
                ${
                  blok.image?.filename +
                  "/m/1920x0/smart/filters:format(webp):quality(80)"
                } 1200w,
                ${
                  blok.image?.filename +
                  "/m/992x0/smart/filters:format(webp):quality(80)"
                } 992w,
                ${
                  blok.image?.filename +
                  "/m/768x0/smart/filters:format(webp):quality(80)"
                } 768w,
                ${
                  blok.image?.filename +
                  "/m/576x0/smart/filters:format(webp):quality(80)"
                } 576w`}
          src={
            blok.image?.filename +
            "/m/1920x0/smart/filters:format(webp):quality(80)"
          }
          alt={blok.image?.alt || "Grid Item Gallery"}
          loading="lazy"
          class="grid-category-item-gallery-image relative top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 max-h-full"
          data-grid-category-item-gallery-image
        />
      ) : (
        <video
          src={blok.image?.filename}
          alt={blok.image?.alt || "Grid Item Gallery"}
          class="grid-category-item-gallery-image relative top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 max-h-full"
          data-grid-category-item-gallery-image
          controls
        />
      )
    }
  </div>
  <div
    class="grid-category-item-gallery-footer flex justify-between items-center flex-grow relative text-sm"
  >
    <div class="absolute left-0 top-1/2 -translate-y-1/2">
      {current && max ? `${current}/${max}` : ""}
      {filename && filename[1]}
    </div>
    {
      isPropEmpty(blok.description) && (
        <div class="ml-auto w-[65%] sm:w-full sm:flex-grow sm:text-center">
          <div class="inline-block static sm:relative">
            <button
              class="grid-category-item-gallery-footer-trigger"
              data-grid-category-item-gallery-footer-trigger
            >
              Information
            </button>
            <div class="grid-category-item-gallery-footer-description pt-2 pb-1 sm:pb-0 bg-white/80 sm:bg-transparent opacity-0 absolute bottom-10 sm:bottom-5 left-0 w-full sm:w-80 text-left z-30">
              <RichTextRenderer richTextData={blok.description} />
            </div>
          </div>
        </div>
      )
    }
  </div>
</div>

<style>
  .grid-category-item-gallery-footer-description,
  .grid-category-item-gallery-image {
    transition: opacity 0.75s ease-in-out;
  }
</style>

<script>
  const triggers = document.querySelectorAll(
    "[data-grid-category-item-gallery-footer-trigger]"
  );

  triggers.forEach((trigger) => {
    trigger.addEventListener("click", () => {
      trigger.nextElementSibling.classList.toggle("opacity-0");
      const parent = trigger.closest("[data-grid-category-item-gallery]");
      parent
        .querySelector("[data-grid-category-item-gallery-image]")
        .classList.toggle("opacity-30");
    });
  });
</script>
