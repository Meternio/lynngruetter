---
import { storyblokEditable } from "@storyblok/astro";
import RichTextRenderer from "@storyblok/astro/RichTextRenderer.astro";

const { blok } = Astro.props;

const isPropEmpty = (prop) => {
  return (
    prop &&
    prop?.content?.length > 0 &&
    (prop?.content[0]?.content || prop?.content[0]?.attrs)
  );
};
---

<div class="text-section-content mt-8 break-words sm:break-normal" {...storyblokEditable(blok)}>
  <h3 class=`uppercase text-lg ${blok.isAccordion && 'text-accordion-trigger font-normal'}` {...{'data-text-accordion-trigger': blok.isAccordion ? "true" : false, 'tabindex': blok.isAccordion ? "0" : false, 'aria-label': blok.isAccordion ? "click to toggle" : false}}>{blok.title}</h3>
  {
    isPropEmpty(blok.content2) ? (
      <div class={`grid grid-flow-row sm:grid-flow-col ${blok.wrapIndividually && 'grid-cols-1'} ${blok.isColumn && '!grid-flow-row !grid-cols-1'} ${blok.noWrap && isPropEmpty(blok.content3) && 'grid-cols-[2fr_2fr_1fr] sm:grid-cols-3'} ${!blok.noWrap && !blok.wrapIndividually && 'grid-cols-2'} sm:auto-cols-fr gap-12`}>
        <div>
          <RichTextRenderer richTextData={blok.content} />
        </div>

        <div class={`${!blok.allLeftAligned ? 'sm:justify-self-center' : ''} ${blok.noWrap && 'justify-self-center'}`}>
          <RichTextRenderer richTextData={blok.content2} />
        </div>

        {isPropEmpty(blok.content3) && (
          <div class={`${!blok.allLeftAligned ? 'sm:justify-self-end' : ''} ${!blok.noWrap ? 'col-start-2' : 'justify-self-end'} sm:col-start-3`}>
            <RichTextRenderer richTextData={blok.content3} />
          </div>
        )}
      </div>
    ) : (
      <>
        {
          blok.isAccordion ? (
            <div class="text-accordion-content max-h-0 opacity-0 blur-sm">
              <RichTextRenderer richTextData={blok.content} />
            </div>
          ) : (
            <RichTextRenderer richTextData={blok.content} />
          )
        }
      </>
    )
  }
  {
    blok.author && (
      <p class="text-sm mt-4">{blok.author}</p>
    )
  }
</div>

<script>
  const accordionTriggers = document.querySelectorAll('[data-text-accordion-trigger]');

  function toggleAccordion(trigger) {
    trigger.parentElement.classList.toggle('text-accordion-active');
    trigger.nextElementSibling.classList.toggle('max-h-10');
    trigger.nextElementSibling.classList.toggle('opacity-0');
    trigger.nextElementSibling.classList.toggle('blur-sm');
  }

  accordionTriggers.forEach(trigger => {
    trigger.addEventListener('click', () => toggleAccordion(trigger));

    trigger.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        toggleAccordion(trigger);
      }
    });
  });
</script>

<style>
  .text-accordion-content, .text-accordion-trigger {
    transition: opacity 0.75s ease-in-out, filter 0.325s ease-in-out, max-height 0.75s ease-in-out;
  }

  .text-accordion-trigger:before, .text-accordion-trigger:after {
    margin-left: 4px;
    position: relative;
  }

  .text-accordion-trigger:after {
    content: "+";
  }

  .text-accordion-active .text-accordion-trigger:after {
    content: "-";
    top: -1px;
  }

  :global(.text-section-content h1, .text-section-content h2, .text-section-content h3, .text-section-content h4, .text-section-content h5, .text-section-content h6) {
    @apply capitalize;
    @apply text-sm;
    @apply font-bold;
  }
</style>