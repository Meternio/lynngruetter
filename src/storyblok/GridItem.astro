---
import { storyblokEditable } from "@storyblok/astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import Dialog from "../components/Dialog.astro";
import Carousel from "./Carousel.astro";
import GridGallery from "./GridGallery.astro";

const { blok, masonry } = Astro.props;

const thumbnailUrl = blok.thumbnail?.filename;

let dimensions = {
  width: 0,
  height: 0,
};

let isVideo = false;

if (thumbnailUrl) {
  dimensions = {
    width: thumbnailUrl.split("/")[5].split("x")[0],
    height: thumbnailUrl.split("/")[5].split("x")[1],
  };

  isVideo = thumbnailUrl.match(/\.(mp4|mov|webm)$/i);
}

const isLink = blok?.link && blok?.link?.url;

const Tag = isLink ? "a" : "div";
---

<div
  {...storyblokEditable(blok)}
  class={`grid-category-item custom-transition ${masonry && "mb-4"} opacity-0 translate-y-3 ${
    blok.doubleWidth
      ? "w-full lg:w-[calc(50%-8px)]"
      : "w-[calc(50%-8px)] lg:w-[calc(25%-12px)]"
  }`}
  data-grid-category-item
>
  <Tag
    {...{
      href: isLink ? blok?.link?.url : false,
      target: isLink ? "_blank" : false,
      "data-grid-category-item-content": isLink ? false : true,
    }}
    class="cursor-pointer"
  >
    {
      !isVideo ? (
        <img
          srcset={`
            ${
              thumbnailUrl + "/m/950x0/smart/filters:format(webp):quality(80)"
            } 1600w,
            ${
              thumbnailUrl + "/m/600x0/smart/filters:format(webp):quality(80)"
            } 1200w,
            ${
              thumbnailUrl + "/m/992x0/smart/filters:format(webp):quality(80)"
            } 992w,
            ${
              thumbnailUrl + "/m/768x0/smart/filters:format(webp):quality(80)"
            } 768w,
            ${
              thumbnailUrl + "/m/576x0/smart/filters:format(webp):quality(80)"
            } 576w,
            ${
              thumbnailUrl + "/m/425x0/smart/filters:format(webp):quality(80)"
            } 425w`}
          src={
            thumbnailUrl + "/m/600x0/smart/filters:format(webp):quality(80)"
          }
          alt={blok.thumbnail?.alt || "Grid Item"}
          loading="lazy"
          class="grid-category-item-thumbnail min-h-56 w-full object-cover"
          height={dimensions?.height}
          width={dimensions?.width}
          data-grid-category-item-thumbnail
        />
      ) : (
        <video
          src={thumbnailUrl}
          class="grid-category-item-thumbnail min-h-56 w-full object-cover"
          height={dimensions?.height}
          width={dimensions?.width}
          data-grid-category-item-thumbnail-video
          loop
          muted
          preload="none"
          data-autoplay
          playsinline
        />
      )
    }
    {
      blok.title && (
        <h2 class="sm:text-center leading-tight hyphens-auto mt-1">
          {blok.title}
        </h2>
      )
    }
  </Tag>
  {
    thumbnailUrl && (
      <Dialog
        classes="grid-gallery-dialog"
        attrs={{ "data-grid-gallery-dialog": true }}
      >
        <div class="container mx-auto h-full">
          <h2 class="sm:text-xl h-[88px] w-11/12 p-0 pt-4 sm:w-full sm:text-center sm:p-4 sm:h-[60px]">
            {blok.title}
          </h2>
          <Carousel
            classes="h-[calc(100%-88px)] sm:h-[calc(100%-60px)]"
            noPagination={blok.gallery.length <= 1 ? true : false}
          >
            <div class="carousel-slide" data-carousel-slide>
              <GridGallery blok={{image: {filename: thumbnailUrl}, description: blok?.description}} current={1} max={blok.gallery?.length + 1} />
            </div>
            {blok?.gallery && blok?.gallery.length > 0 && blok.gallery?.map((gallery, index) => {
              return (
                <div class="carousel-slide" data-carousel-slide>
                  <StoryblokComponent
                    blok={gallery}
                    current={index + 2}
                    max={blok.gallery?.length + 1}
                  />
                </div>
              );
            })}
          </Carousel>
        </div>
      </Dialog>
    )
  }
</div>

<script>
  const videos = document.querySelectorAll(
    "[data-grid-category-item-thumbnail-video]"
  );

  videos.forEach((video) => {
    video.addEventListener("mouseenter", function () {
      video.pause();
    });
    video.addEventListener("mouseleave", function () {
      video.play();
    });
    video.addEventListener("touchstart", function () {
      video.pause();
    });
    video.addEventListener("touchend", function () {
      video.play();
    });
  });

  const gridItems = document.querySelectorAll(
    "[data-grid-category-item-content]"
  );

  gridItems.forEach((item) => {
    item.addEventListener("click", function (e) {
      e.preventDefault();
      const dialog = item.nextElementSibling;
      if (dialog && dialog.matches("[data-grid-gallery-dialog]")) {
        dialog.showModal();
        document.querySelector("body").classList.add("overflow-hidden");
        dialog.classList.remove("opacity-0");
      }
    });
  });
</script>

<style>
  .grid-category-item.custom-transition {
    transition:
      opacity 0.75s ease-in-out,
      transform 0.75s ease-in-out;
  }
</style>
